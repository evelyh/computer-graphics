// Set the pixel color to an interesting procedural color generated by mixing
// and filtering Perlin noise of different frequencies.
//
// Uniforms:
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
in vec3 sphere_fs_in;
in vec3 normal_fs_in;
in vec4 pos_fs_in; 
in vec4 view_pos_fs_in; 
// Outputs:
out vec3 color;

// expects: blinn_phong, perlin_noise
void main()
{
  float theta = 2 * animation_seconds * (M_PI / 4);
  vec3 n = normalize(normal_fs_in);
  vec3 v = normalize(view_pos_fs_in.xyz / view_pos_fs_in.w);
  vec4 light = view * vec4(cos(theta), 2.5, 2 * sin(theta), 1);
  vec3 l = normalize(light - view_pos_fs_in).xyz;

  float strength = 2; //noise strength
  float fq1 = 8; //noise frequency
  float fq2 = 2; 
  float noise = sin(fq1 * (sphere_fs_in.z + perlin_noise(fq2 * sphere_fs_in))) / strength / 2;
  float p;
  vec3 ka, kd, ks;
  
  if (is_moon) {
    p = 200;
    ka = vec3(0.03, 0.03, 0.09);
    kd = mix(vec3(0.5), vec3(1), noise);
    ks = vec3(1);
  } else {
    p = 1000;
    ka = vec3(0.03, 0.03, 0.09);
    kd = mix(vec3(0.2, 0.2, 0.8), vec3(0.8), noise);
    ks = vec3(1);
  }
  color = blinn_phong(ka, kd, ks, p, n, v, l);
}
